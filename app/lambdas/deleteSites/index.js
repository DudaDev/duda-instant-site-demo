"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers_1 = require("headers");
const { API_BASE = '', API_USER = '', API_PASS = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers_1.default.response
    };
    try {
        const sites = event.body;
        var error = false;
        var message = '';
        var status = response.statusCode;
        var deleted = [];
        var notDeleted = [];
        sites.forEach(async (site) => {
            const result = await deleteSite(site.siteName);
            if (result.error) {
                error = result.error;
                message = JSON.stringify(result.message);
                status = result.statusCode;
                notDeleted.push(site);
            }
            else {
                deleted.push(site);
            }
        });
        response.statusCode = status;
        if (error) {
            if (deleted.length == 0) {
                response.body = JSON.stringify({
                    "error": `Sites not deleted: ${JSON.stringify(notDeleted)}`,
                    "description": message
                });
            }
            else if (deleted.length > 0) {
                response.body = JSON.stringify({
                    "error": `Some sites were deleted: ${JSON.stringify(deleted)}`,
                    "description": message
                });
            }
        }
        else {
            response.body = JSON.stringify({
                "status": "All provided sites were deleted."
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const deleteSite = async function (siteName) {
    const url = `${API_BASE}/sites/multiscreen/${siteName}`;
    const options = {
        method: 'DELETE',
        headers: headers_1.default.request(API_USER, API_PASS)
    };
    const response = await fetch(url, options);
    if (response.error) {
        var result = {
            statusCode: 500,
            error: true,
            message: ''
        };
        result.statusCode = response.statusCode;
        result.error = response.error;
        return result;
    }
    else {
        return await response.json();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYixxQ0FBNkI7QUFDN0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUU1RCxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQVU7SUFFdEMsSUFBSSxRQUFRLEdBQUc7UUFDYixJQUFJLEVBQUUsRUFBRTtRQUNSLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLGlCQUFPLENBQUMsUUFBUTtLQUMxQixDQUFBO0lBRUQsSUFBSTtRQUVGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUE7UUFFeEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2pCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUNoQixJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO1FBRWhDLElBQUksT0FBTyxHQUFVLEVBQUUsQ0FBQTtRQUN2QixJQUFJLFVBQVUsR0FBVSxFQUFFLENBQUE7UUFFMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBUyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQzlDLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDaEIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQ3BCLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDeEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUE7Z0JBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDdEI7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUE7UUFFNUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUN2QixRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQzdCLE9BQU8sRUFBRSxzQkFBc0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDM0QsYUFBYSxFQUFFLE9BQU87aUJBQ3ZCLENBQUMsQ0FBQTthQUNIO2lCQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzdCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDN0IsT0FBTyxFQUFFLDRCQUE0QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUM5RCxhQUFhLEVBQUUsT0FBTztpQkFDdkIsQ0FBQyxDQUFBO2FBQ0g7U0FDRjthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM3QixRQUFRLEVBQUUsa0NBQWtDO2FBQzdDLENBQUMsQ0FBQTtTQUNIO0tBRUY7SUFBQyxPQUFNLENBQUMsRUFBRTtRQUVULFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM3QixPQUFPLEVBQUUsb0JBQW9CLEtBQUssQ0FBQyxVQUFVLGdCQUFnQixLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzdFLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQTtLQUVIO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFFakIsQ0FBQztBQTlERCwwQkE4REM7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLFdBQVUsUUFBYTtJQUUzQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFFBQVEsc0JBQXNCLFFBQVEsRUFBRSxDQUFBO0lBRXZELE1BQU0sT0FBTyxHQUFHO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsT0FBTyxFQUFFLGlCQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7S0FDN0MsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMxQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7UUFFbEIsSUFBSSxNQUFNLEdBQUc7WUFDWCxVQUFVLEVBQUUsR0FBRztZQUNmLEtBQUssRUFBRSxJQUFJO1lBQ1gsT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFBO1FBRUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO1FBQ3ZDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQTtRQUU3QixPQUFPLE1BQU0sQ0FBQTtLQUVkO1NBQU07UUFFTCxPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO0tBRTdCO0FBRUwsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBoZWFkZXJzIGZyb20gJ2hlYWRlcnMnXG5jb25zdCB7IEFQSV9CQVNFID0gJycsIEFQSV9VU0VSID0gJycsIEFQSV9QQVNTID0gJycgfSA9IHByb2Nlc3MuZW52XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBhbnkpIHtcblxuICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgYm9keTogJycsXG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGhlYWRlcnM6IGhlYWRlcnMucmVzcG9uc2VcbiAgfVxuXG4gIHRyeSB7XG5cbiAgICBjb25zdCBzaXRlcyA9IGV2ZW50LmJvZHlcblxuICAgIHZhciBlcnJvciA9IGZhbHNlXG4gICAgdmFyIG1lc3NhZ2UgPSAnJ1xuICAgIHZhciBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXNDb2RlXG5cbiAgICB2YXIgZGVsZXRlZDogYW55W10gPSBbXVxuICAgIHZhciBub3REZWxldGVkOiBhbnlbXSA9IFtdXG5cbiAgICBzaXRlcy5mb3JFYWNoKGFzeW5jIChzaXRlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRlbGV0ZVNpdGUoc2l0ZS5zaXRlTmFtZSlcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSByZXN1bHQuZXJyb3JcbiAgICAgICAgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdC5tZXNzYWdlKVxuICAgICAgICBzdGF0dXMgPSByZXN1bHQuc3RhdHVzQ29kZVxuICAgICAgICBub3REZWxldGVkLnB1c2goc2l0ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZWQucHVzaChzaXRlKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gc3RhdHVzXG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChkZWxldGVkLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgXCJlcnJvclwiOiBgU2l0ZXMgbm90IGRlbGV0ZWQ6ICR7SlNPTi5zdHJpbmdpZnkobm90RGVsZXRlZCl9YCxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG1lc3NhZ2UgXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGRlbGV0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIFwiZXJyb3JcIjogYFNvbWUgc2l0ZXMgd2VyZSBkZWxldGVkOiAke0pTT04uc3RyaW5naWZ5KGRlbGV0ZWQpfWAsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBtZXNzYWdlIFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcInN0YXR1c1wiOiBcIkFsbCBwcm92aWRlZCBzaXRlcyB3ZXJlIGRlbGV0ZWQuXCJcbiAgICAgIH0pXG4gICAgfVxuXG4gIH0gY2F0Y2goZSkge1xuXG4gICAgcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIFwiZXJyb3JcIjogYFByb2JsZW0gaGFuZGxpbmcgJHtldmVudC5odHRwTWV0aG9kfSBvbiByZXNvdXJjZSAke2V2ZW50LnJlc291cmNlfWAsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IGVcbiAgICB9KVxuXG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2VcblxufVxuXG5jb25zdCBkZWxldGVTaXRlID0gYXN5bmMgZnVuY3Rpb24oc2l0ZU5hbWU6IGFueSkge1xuXG4gICAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0V9L3NpdGVzL211bHRpc2NyZWVuLyR7c2l0ZU5hbWV9YFxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLnJlcXVlc3QoQVBJX1VTRVIsIEFQSV9QQVNTKVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKVxuICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgXG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgIGVycm9yOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnJ1xuICAgICAgfVxuICBcbiAgICAgIHJlc3VsdC5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZVxuICAgICAgcmVzdWx0LmVycm9yID0gcmVzcG9uc2UuZXJyb3JcbiAgXG4gICAgICByZXR1cm4gcmVzdWx0XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICB9XG5cbn1cbiJdfQ==