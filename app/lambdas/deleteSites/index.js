"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers_1 = require("headers");
const { API_BASE = '', API_USER = '', API_PASS = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers_1.default.response
    };
    try {
        const sites = event.body;
        var error = false;
        var message = '';
        var status = response.statusCode;
        var deleted = [];
        var notDeleted = [];
        sites.forEach(async (site) => {
            const result = await deleteSite(site.siteName);
            if (result.error) {
                error = result.error;
                message = JSON.stringify(result.message);
                status = result.statusCode;
                notDeleted.push(site);
            }
            else {
                deleted.push(site);
            }
        });
        response.statusCode = status;
        if (error) {
            if (deleted.length == 0) {
                response.body = JSON.stringify({
                    "error": `Sites not deleted: ${JSON.stringify(notDeleted)}`,
                    "description": message
                });
            }
            else if (deleted.length > 0) {
                response.body = JSON.stringify({
                    "error": `Some sites were deleted: ${JSON.stringify(deleted)}`,
                    "description": message
                });
            }
        }
        else {
            response.body = JSON.stringify({
                "status": "All provided sites were deleted."
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const deleteSite = async function (siteName) {
    const url = `${API_BASE}/sites/multiscreen/${siteName}`;
    const options = {
        method: 'DELETE',
        headers: headers_1.default.request(API_USER, API_PASS)
    };
    const response = await fetch(url, options);
    const result = await response.json();
    result.error = response.ok;
    result.statusCode = response.statusCode;
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYixxQ0FBNkI7QUFDN0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUU1RCxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQVU7SUFFdEMsSUFBSSxRQUFRLEdBQUc7UUFDYixJQUFJLEVBQUUsRUFBRTtRQUNSLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLGlCQUFPLENBQUMsUUFBUTtLQUMxQixDQUFBO0lBRUQsSUFBSTtRQUVGLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUE7UUFFeEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2pCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtRQUNoQixJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO1FBRWhDLElBQUksT0FBTyxHQUFVLEVBQUUsQ0FBQTtRQUN2QixJQUFJLFVBQVUsR0FBVSxFQUFFLENBQUE7UUFFMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBUyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQzlDLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDaEIsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQ3BCLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDeEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUE7Z0JBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDdEI7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUE7UUFFNUIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUN2QixRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQzdCLE9BQU8sRUFBRSxzQkFBc0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDM0QsYUFBYSxFQUFFLE9BQU87aUJBQ3ZCLENBQUMsQ0FBQTthQUNIO2lCQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzdCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDN0IsT0FBTyxFQUFFLDRCQUE0QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUM5RCxhQUFhLEVBQUUsT0FBTztpQkFDdkIsQ0FBQyxDQUFBO2FBQ0g7U0FDRjthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM3QixRQUFRLEVBQUUsa0NBQWtDO2FBQzdDLENBQUMsQ0FBQTtTQUNIO0tBRUY7SUFBQyxPQUFNLENBQUMsRUFBRTtRQUVULFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM3QixPQUFPLEVBQUUsb0JBQW9CLEtBQUssQ0FBQyxVQUFVLGdCQUFnQixLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzdFLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQTtLQUVIO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFFakIsQ0FBQztBQTlERCwwQkE4REM7QUFFRCxNQUFNLFVBQVUsR0FBRyxLQUFLLFdBQVUsUUFBYTtJQUUzQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFFBQVEsc0JBQXNCLFFBQVEsRUFBRSxDQUFBO0lBRXZELE1BQU0sT0FBTyxHQUFHO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsT0FBTyxFQUFFLGlCQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7S0FDN0MsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUVwQyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUE7SUFDMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO0lBRXZDLE9BQU8sTUFBTSxDQUFBO0FBRWpCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgaGVhZGVycyBmcm9tICdoZWFkZXJzJ1xuY29uc3QgeyBBUElfQkFTRSA9ICcnLCBBUElfVVNFUiA9ICcnLCBBUElfUEFTUyA9ICcnIH0gPSBwcm9jZXNzLmVudlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogYW55KSB7XG5cbiAgdmFyIHJlc3BvbnNlID0ge1xuICAgIGJvZHk6ICcnLFxuICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLnJlc3BvbnNlXG4gIH1cblxuICB0cnkge1xuXG4gICAgY29uc3Qgc2l0ZXMgPSBldmVudC5ib2R5XG5cbiAgICB2YXIgZXJyb3IgPSBmYWxzZVxuICAgIHZhciBtZXNzYWdlID0gJydcbiAgICB2YXIgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZVxuXG4gICAgdmFyIGRlbGV0ZWQ6IGFueVtdID0gW11cbiAgICB2YXIgbm90RGVsZXRlZDogYW55W10gPSBbXVxuXG4gICAgc2l0ZXMuZm9yRWFjaChhc3luYyAoc2l0ZTogYW55KSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkZWxldGVTaXRlKHNpdGUuc2l0ZU5hbWUpXG4gICAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIGVycm9yID0gcmVzdWx0LmVycm9yXG4gICAgICAgIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQubWVzc2FnZSlcbiAgICAgICAgc3RhdHVzID0gcmVzdWx0LnN0YXR1c0NvZGVcbiAgICAgICAgbm90RGVsZXRlZC5wdXNoKHNpdGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGVkLnB1c2goc2l0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IHN0YXR1c1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT0gMCkge1xuICAgICAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIFwiZXJyb3JcIjogYFNpdGVzIG5vdCBkZWxldGVkOiAke0pTT04uc3RyaW5naWZ5KG5vdERlbGV0ZWQpfWAsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBtZXNzYWdlIFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChkZWxldGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBcImVycm9yXCI6IGBTb21lIHNpdGVzIHdlcmUgZGVsZXRlZDogJHtKU09OLnN0cmluZ2lmeShkZWxldGVkKX1gLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbWVzc2FnZSBcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJBbGwgcHJvdmlkZWQgc2l0ZXMgd2VyZSBkZWxldGVkLlwiXG4gICAgICB9KVxuICAgIH1cblxuICB9IGNhdGNoKGUpIHtcblxuICAgIHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBcImVycm9yXCI6IGBQcm9ibGVtIGhhbmRsaW5nICR7ZXZlbnQuaHR0cE1ldGhvZH0gb24gcmVzb3VyY2UgJHtldmVudC5yZXNvdXJjZX1gLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBlXG4gICAgfSlcblxuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlXG5cbn1cblxuY29uc3QgZGVsZXRlU2l0ZSA9IGFzeW5jIGZ1bmN0aW9uKHNpdGVOYW1lOiBhbnkpIHtcblxuICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFfS9zaXRlcy9tdWx0aXNjcmVlbi8ke3NpdGVOYW1lfWBcblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5yZXF1ZXN0KEFQSV9VU0VSLCBBUElfUEFTUylcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucylcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgIHJlc3VsdC5lcnJvciA9IHJlc3BvbnNlLm9rXG4gICAgcmVzdWx0LnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlXG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbn1cbiJdfQ==