"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers = require("duda-aws-headers");
const { API_BASE = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers.response
    };
    try {
        const result = await grantSiteAccess(event.pathParameters.userId, event.pathParameters.siteName);
        if (result.error) {
            result.statusCode == 403 ? response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": "Unable to authenticate with the Duda API"
            }) : response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": JSON.stringify(result.message)
            });
        }
        else {
            response.body = JSON.stringify({
                "status": `User ${event.pathParameters.userId} was granted access to site ${event.pathParameters.siteName}.`
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const grantSiteAccess = async function (userId, siteName) {
    const url = `${API_BASE}/accounts/${userId}/sites/${siteName}/permissions`;
    const options = {
        method: 'POST',
        headers: headers.request,
        body: JSON.stringify({
            permissions: [
                'STATS_TAB',
                'EDIT',
                'E_COMMERCE',
                'PUBLISH',
                'REPUBLISH',
                'DEV_MODE',
                'INSITE',
                'SEO',
                'BACKUPS',
                'CUSTOM_DOMAIN',
                'RESET',
                'BLOG',
                'PUSH_NOTIFICATIONS',
                'SITE_COMMENTS',
                'CONTENT_LIBRARY',
                'USE_APP',
                'CLIENT_MANAGE_FREE_APPS'
            ]
        })
    };
    const response = await fetch(url, options);
    var result = {
        statusCode: 500,
        error: true,
        message: ''
    } || await response.json();
    result.statusCode = response.statusCode;
    result.error = response.ok;
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYiw0Q0FBMkM7QUFDM0MsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRTlCLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBVTtJQUV0QyxJQUFJLFFBQVEsR0FBRztRQUNiLElBQUksRUFBRSxFQUFFO1FBQ1IsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsT0FBTyxDQUFDLFFBQVE7S0FDMUIsQ0FBQTtJQUVELElBQUk7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQWUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBRWhHLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQixNQUFNLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUN4RCxPQUFPLEVBQUUsZ0NBQWdDO2dCQUN6QyxhQUFhLEVBQUUsMENBQTBDO2FBQzFELENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNsQyxPQUFPLEVBQUUsZ0NBQWdDO2dCQUN6QyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQzlDLENBQUMsQ0FBQTtTQUNIO2FBQU07WUFDTCxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQzdCLFFBQVEsRUFBRSxRQUFRLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSwrQkFBK0IsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUc7YUFDN0csQ0FBQyxDQUFBO1NBQ0g7S0FFRjtJQUFDLE9BQU0sQ0FBQyxFQUFFO1FBRVQsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzdCLE9BQU8sRUFBRSxvQkFBb0IsS0FBSyxDQUFDLFVBQVUsZ0JBQWdCLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDN0UsYUFBYSxFQUFFLENBQUM7U0FDakIsQ0FBQyxDQUFBO0tBRUg7SUFFRCxPQUFPLFFBQVEsQ0FBQTtBQUVqQixDQUFDO0FBckNELDBCQXFDQztBQUVELE1BQU0sZUFBZSxHQUFHLEtBQUssV0FBVSxNQUFXLEVBQUUsUUFBYTtJQUU3RCxNQUFNLEdBQUcsR0FBRyxHQUFHLFFBQVEsYUFBYSxNQUFNLFVBQVUsUUFBUSxjQUFjLENBQUE7SUFFMUUsTUFBTSxPQUFPLEdBQUc7UUFDZCxNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztRQUN4QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuQixXQUFXLEVBQUU7Z0JBQ1gsV0FBVztnQkFDWCxNQUFNO2dCQUNOLFlBQVk7Z0JBQ1osU0FBUztnQkFDVCxXQUFXO2dCQUNYLFVBQVU7Z0JBQ1YsUUFBUTtnQkFDUixLQUFLO2dCQUNMLFNBQVM7Z0JBQ1QsZUFBZTtnQkFDZixPQUFPO2dCQUNQLE1BQU07Z0JBQ04sb0JBQW9CO2dCQUNwQixlQUFlO2dCQUNmLGlCQUFpQjtnQkFDakIsU0FBUztnQkFDVCx5QkFBeUI7YUFDMUI7U0FDRixDQUFDO0tBQ0gsQ0FBQTtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUUxQyxJQUFJLE1BQU0sR0FBRztRQUNYLFVBQVUsRUFBRSxHQUFHO1FBQ2YsS0FBSyxFQUFFLElBQUk7UUFDWCxPQUFPLEVBQUUsRUFBRTtLQUNaLElBQUksTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFMUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO0lBQ3ZDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQTtJQUUxQixPQUFPLE1BQU0sQ0FBQTtBQUVqQixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBmZXRjaCBmcm9tICdub2RlLWZldGNoJ1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgaGVhZGVycyBmcm9tICdkdWRhLWF3cy1oZWFkZXJzJ1xuY29uc3QgeyBBUElfQkFTRSA9ICcnIH0gPSBwcm9jZXNzLmVudlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogYW55KSB7XG5cbiAgdmFyIHJlc3BvbnNlID0ge1xuICAgIGJvZHk6ICcnLFxuICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLnJlc3BvbnNlXG4gIH1cblxuICB0cnkge1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3JhbnRTaXRlQWNjZXNzKGV2ZW50LnBhdGhQYXJhbWV0ZXJzLnVzZXJJZCwgZXZlbnQucGF0aFBhcmFtZXRlcnMuc2l0ZU5hbWUpXG5cbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICByZXN1bHQuc3RhdHVzQ29kZSA9PSA0MDMgPyByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgXCJlcnJvclwiOiBcIkR1ZGEgQVBJIHJlc3BvbmRlZCB3aXRoIGVycm9yLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHRoZSBEdWRhIEFQSVwiIFxuICAgICAgfSkgOiByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgXCJlcnJvclwiOiBcIkR1ZGEgQVBJIHJlc3BvbmRlZCB3aXRoIGVycm9yLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IEpTT04uc3RyaW5naWZ5KHJlc3VsdC5tZXNzYWdlKSAgXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcInN0YXR1c1wiOiBgVXNlciAke2V2ZW50LnBhdGhQYXJhbWV0ZXJzLnVzZXJJZH0gd2FzIGdyYW50ZWQgYWNjZXNzIHRvIHNpdGUgJHtldmVudC5wYXRoUGFyYW1ldGVycy5zaXRlTmFtZX0uYFxuICAgICAgfSlcbiAgICB9XG5cbiAgfSBjYXRjaChlKSB7XG5cbiAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgXCJlcnJvclwiOiBgUHJvYmxlbSBoYW5kbGluZyAke2V2ZW50Lmh0dHBNZXRob2R9IG9uIHJlc291cmNlICR7ZXZlbnQucmVzb3VyY2V9YCxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogZVxuICAgIH0pXG5cbiAgfVxuXG4gIHJldHVybiByZXNwb25zZVxuXG59XG5cbmNvbnN0IGdyYW50U2l0ZUFjY2VzcyA9IGFzeW5jIGZ1bmN0aW9uKHVzZXJJZDogYW55LCBzaXRlTmFtZTogYW55KSB7XG5cbiAgICBjb25zdCB1cmwgPSBgJHtBUElfQkFTRX0vYWNjb3VudHMvJHt1c2VySWR9L3NpdGVzLyR7c2l0ZU5hbWV9L3Blcm1pc3Npb25zYFxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5yZXF1ZXN0LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBwZXJtaXNzaW9uczogW1xuICAgICAgICAgICdTVEFUU19UQUInLFxuICAgICAgICAgICdFRElUJyxcbiAgICAgICAgICAnRV9DT01NRVJDRScsXG4gICAgICAgICAgJ1BVQkxJU0gnLFxuICAgICAgICAgICdSRVBVQkxJU0gnLFxuICAgICAgICAgICdERVZfTU9ERScsXG4gICAgICAgICAgJ0lOU0lURScsXG4gICAgICAgICAgJ1NFTycsXG4gICAgICAgICAgJ0JBQ0tVUFMnLFxuICAgICAgICAgICdDVVNUT01fRE9NQUlOJyxcbiAgICAgICAgICAnUkVTRVQnLFxuICAgICAgICAgICdCTE9HJyxcbiAgICAgICAgICAnUFVTSF9OT1RJRklDQVRJT05TJyxcbiAgICAgICAgICAnU0lURV9DT01NRU5UUycsXG4gICAgICAgICAgJ0NPTlRFTlRfTElCUkFSWScsXG4gICAgICAgICAgJ1VTRV9BUFAnLFxuICAgICAgICAgICdDTElFTlRfTUFOQUdFX0ZSRUVfQVBQUydcbiAgICAgICAgXVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucylcblxuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICcnXG4gICAgfSB8fCBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgIHJlc3VsdC5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzQ29kZVxuICAgIHJlc3VsdC5lcnJvciA9IHJlc3BvbnNlLm9rXG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbn1cbiJdfQ==