"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers_1 = require("headers");
const { API_BASE = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers_1.default.response
    };
    try {
        const result = await grantSiteAccess(event.pathParameters.userId, event.pathParameters.siteName);
        if (result.error) {
            result.statusCode == 403 ? response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": "Unable to authenticate with the Duda API"
            }) : response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": JSON.stringify(result.message)
            });
        }
        else {
            response.body = JSON.stringify({
                "status": `User ${event.pathParameters.userId} was granted access to site ${event.pathParameters.siteName}.`
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const grantSiteAccess = async function (userId, siteName) {
    const url = `${API_BASE}/accounts/${userId}/sites/${siteName}/permissions`;
    const options = {
        method: 'POST',
        headers: headers_1.default.request,
        body: JSON.stringify({
            permissions: [
                'STATS_TAB',
                'EDIT',
                'E_COMMERCE',
                'PUBLISH',
                'REPUBLISH',
                'DEV_MODE',
                'INSITE',
                'SEO',
                'BACKUPS',
                'CUSTOM_DOMAIN',
                'RESET',
                'BLOG',
                'PUSH_NOTIFICATIONS',
                'SITE_COMMENTS',
                'CONTENT_LIBRARY',
                'USE_APP',
                'CLIENT_MANAGE_FREE_APPS'
            ]
        })
    };
    const response = await fetch(url, options);
    if (response.error) {
        var result = {
            statusCode: 500,
            error: true,
            message: ''
        };
        result.statusCode = response.statusCode;
        result.error = response.ok;
        return result;
    }
    else {
        return await response.json();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYixxQ0FBNkI7QUFDN0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRTlCLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBVTtJQUV0QyxJQUFJLFFBQVEsR0FBRztRQUNiLElBQUksRUFBRSxFQUFFO1FBQ1IsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsaUJBQU8sQ0FBQyxRQUFRO0tBQzFCLENBQUE7SUFFRCxJQUFJO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUVoRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsTUFBTSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDeEQsT0FBTyxFQUFFLGdDQUFnQztnQkFDekMsYUFBYSxFQUFFLDBDQUEwQzthQUMxRCxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbEMsT0FBTyxFQUFFLGdDQUFnQztnQkFDekMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUM5QyxDQUFDLENBQUE7U0FDSDthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM3QixRQUFRLEVBQUUsUUFBUSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sK0JBQStCLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHO2FBQzdHLENBQUMsQ0FBQTtTQUNIO0tBRUY7SUFBQyxPQUFNLENBQUMsRUFBRTtRQUVULFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM3QixPQUFPLEVBQUUsb0JBQW9CLEtBQUssQ0FBQyxVQUFVLGdCQUFnQixLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzdFLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQTtLQUVIO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFFakIsQ0FBQztBQXJDRCwwQkFxQ0M7QUFFRCxNQUFNLGVBQWUsR0FBRyxLQUFLLFdBQVUsTUFBVyxFQUFFLFFBQWE7SUFFN0QsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLGFBQWEsTUFBTSxVQUFVLFFBQVEsY0FBYyxDQUFBO0lBRTFFLE1BQU0sT0FBTyxHQUFHO1FBQ2QsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsaUJBQU8sQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ25CLFdBQVcsRUFBRTtnQkFDWCxXQUFXO2dCQUNYLE1BQU07Z0JBQ04sWUFBWTtnQkFDWixTQUFTO2dCQUNULFdBQVc7Z0JBQ1gsVUFBVTtnQkFDVixRQUFRO2dCQUNSLEtBQUs7Z0JBQ0wsU0FBUztnQkFDVCxlQUFlO2dCQUNmLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixvQkFBb0I7Z0JBQ3BCLGVBQWU7Z0JBQ2YsaUJBQWlCO2dCQUNqQixTQUFTO2dCQUNULHlCQUF5QjthQUMxQjtTQUNGLENBQUM7S0FDSCxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRTFDLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtRQUVsQixJQUFJLE1BQU0sR0FBRztZQUNYLFVBQVUsRUFBRSxHQUFHO1lBQ2YsS0FBSyxFQUFFLElBQUk7WUFDWCxPQUFPLEVBQUUsRUFBRTtTQUNaLENBQUE7UUFFRCxNQUFNLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUE7UUFDdkMsTUFBTSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFBO1FBRTFCLE9BQU8sTUFBTSxDQUFBO0tBRWQ7U0FBTTtRQUVMLE9BQU8sTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7S0FFN0I7QUFFTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBmZXRjaCBmcm9tICdub2RlLWZldGNoJ1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGhlYWRlcnMgZnJvbSAnaGVhZGVycydcbmNvbnN0IHsgQVBJX0JBU0UgPSAnJyB9ID0gcHJvY2Vzcy5lbnZcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQ6IGFueSkge1xuXG4gIHZhciByZXNwb25zZSA9IHtcbiAgICBib2R5OiAnJyxcbiAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgaGVhZGVyczogaGVhZGVycy5yZXNwb25zZVxuICB9XG5cbiAgdHJ5IHtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdyYW50U2l0ZUFjY2VzcyhldmVudC5wYXRoUGFyYW1ldGVycy51c2VySWQsIGV2ZW50LnBhdGhQYXJhbWV0ZXJzLnNpdGVOYW1lKVxuXG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgcmVzdWx0LnN0YXR1c0NvZGUgPT0gNDAzID8gcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgIFwiZXJyb3JcIjogXCJEdWRhIEFQSSByZXNwb25kZWQgd2l0aCBlcnJvci5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVuYWJsZSB0byBhdXRoZW50aWNhdGUgd2l0aCB0aGUgRHVkYSBBUElcIiBcbiAgICAgIH0pIDogcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgIFwiZXJyb3JcIjogXCJEdWRhIEFQSSByZXNwb25kZWQgd2l0aCBlcnJvci5cIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBKU09OLnN0cmluZ2lmeShyZXN1bHQubWVzc2FnZSkgIFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgXCJzdGF0dXNcIjogYFVzZXIgJHtldmVudC5wYXRoUGFyYW1ldGVycy51c2VySWR9IHdhcyBncmFudGVkIGFjY2VzcyB0byBzaXRlICR7ZXZlbnQucGF0aFBhcmFtZXRlcnMuc2l0ZU5hbWV9LmBcbiAgICAgIH0pXG4gICAgfVxuXG4gIH0gY2F0Y2goZSkge1xuXG4gICAgcmVzcG9uc2UuYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIFwiZXJyb3JcIjogYFByb2JsZW0gaGFuZGxpbmcgJHtldmVudC5odHRwTWV0aG9kfSBvbiByZXNvdXJjZSAke2V2ZW50LnJlc291cmNlfWAsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IGVcbiAgICB9KVxuXG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2VcblxufVxuXG5jb25zdCBncmFudFNpdGVBY2Nlc3MgPSBhc3luYyBmdW5jdGlvbih1c2VySWQ6IGFueSwgc2l0ZU5hbWU6IGFueSkge1xuXG4gICAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0V9L2FjY291bnRzLyR7dXNlcklkfS9zaXRlcy8ke3NpdGVOYW1lfS9wZXJtaXNzaW9uc2BcblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMucmVxdWVzdCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAnU1RBVFNfVEFCJyxcbiAgICAgICAgICAnRURJVCcsXG4gICAgICAgICAgJ0VfQ09NTUVSQ0UnLFxuICAgICAgICAgICdQVUJMSVNIJyxcbiAgICAgICAgICAnUkVQVUJMSVNIJyxcbiAgICAgICAgICAnREVWX01PREUnLFxuICAgICAgICAgICdJTlNJVEUnLFxuICAgICAgICAgICdTRU8nLFxuICAgICAgICAgICdCQUNLVVBTJyxcbiAgICAgICAgICAnQ1VTVE9NX0RPTUFJTicsXG4gICAgICAgICAgJ1JFU0VUJyxcbiAgICAgICAgICAnQkxPRycsXG4gICAgICAgICAgJ1BVU0hfTk9USUZJQ0FUSU9OUycsXG4gICAgICAgICAgJ1NJVEVfQ09NTUVOVFMnLFxuICAgICAgICAgICdDT05URU5UX0xJQlJBUlknLFxuICAgICAgICAgICdVU0VfQVBQJyxcbiAgICAgICAgICAnQ0xJRU5UX01BTkFHRV9GUkVFX0FQUFMnXG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXG5cbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIFxuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJydcbiAgICAgIH1cbiAgXG4gICAgICByZXN1bHQuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGVcbiAgICAgIHJlc3VsdC5lcnJvciA9IHJlc3BvbnNlLm9rXG4gIFxuICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgfVxuXG59XG4iXX0=