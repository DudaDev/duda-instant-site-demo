"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers_1 = require("headers");
const { API_BASE = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers_1.default.response
    };
    try {
        const result = await grantSiteAccess(event.pathParameters.userId, event.pathParameters.siteName);
        if (result.error) {
            result.statusCode == 403 ? response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": "Unable to authenticate with the Duda API"
            }) : response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": JSON.stringify(result.message)
            });
        }
        else {
            response.body = JSON.stringify({
                "status": `User ${event.pathParameters.userId} was granted access to site ${event.pathParameters.siteName}.`
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const grantSiteAccess = async function (userId, siteName) {
    const url = `${API_BASE}/accounts/${userId}/sites/${siteName}/permissions`;
    const options = {
        method: 'POST',
        headers: headers_1.default.request,
        body: JSON.stringify({
            permissions: [
                'STATS_TAB',
                'EDIT',
                'E_COMMERCE',
                'PUBLISH',
                'REPUBLISH',
                'DEV_MODE',
                'INSITE',
                'SEO',
                'BACKUPS',
                'CUSTOM_DOMAIN',
                'RESET',
                'BLOG',
                'PUSH_NOTIFICATIONS',
                'SITE_COMMENTS',
                'CONTENT_LIBRARY',
                'USE_APP',
                'CLIENT_MANAGE_FREE_APPS'
            ]
        })
    };
    const response = await fetch(url, options);
    var result = {
        statusCode: 500,
        error: true,
        message: ''
    };
    result.statusCode = response.statusCode;
    result.error = response.error;
    if (response.error) {
        const error = await response.json();
        result.message = error.message;
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYixxQ0FBNkI7QUFDN0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRTlCLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBVTtJQUV0QyxJQUFJLFFBQVEsR0FBRztRQUNiLElBQUksRUFBRSxFQUFFO1FBQ1IsVUFBVSxFQUFFLEdBQUc7UUFDZixPQUFPLEVBQUUsaUJBQU8sQ0FBQyxRQUFRO0tBQzFCLENBQUE7SUFFRCxJQUFJO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUVoRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsTUFBTSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDeEQsT0FBTyxFQUFFLGdDQUFnQztnQkFDekMsYUFBYSxFQUFFLDBDQUEwQzthQUMxRCxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbEMsT0FBTyxFQUFFLGdDQUFnQztnQkFDekMsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUM5QyxDQUFDLENBQUE7U0FDSDthQUFNO1lBQ0wsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUM3QixRQUFRLEVBQUUsUUFBUSxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sK0JBQStCLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHO2FBQzdHLENBQUMsQ0FBQTtTQUNIO0tBRUY7SUFBQyxPQUFNLENBQUMsRUFBRTtRQUVULFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUM3QixPQUFPLEVBQUUsb0JBQW9CLEtBQUssQ0FBQyxVQUFVLGdCQUFnQixLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzdFLGFBQWEsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQTtLQUVIO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFFakIsQ0FBQztBQXJDRCwwQkFxQ0M7QUFFRCxNQUFNLGVBQWUsR0FBRyxLQUFLLFdBQVUsTUFBVyxFQUFFLFFBQWE7SUFFN0QsTUFBTSxHQUFHLEdBQUcsR0FBRyxRQUFRLGFBQWEsTUFBTSxVQUFVLFFBQVEsY0FBYyxDQUFBO0lBRTFFLE1BQU0sT0FBTyxHQUFHO1FBQ2QsTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsaUJBQU8sQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ25CLFdBQVcsRUFBRTtnQkFDWCxXQUFXO2dCQUNYLE1BQU07Z0JBQ04sWUFBWTtnQkFDWixTQUFTO2dCQUNULFdBQVc7Z0JBQ1gsVUFBVTtnQkFDVixRQUFRO2dCQUNSLEtBQUs7Z0JBQ0wsU0FBUztnQkFDVCxlQUFlO2dCQUNmLE9BQU87Z0JBQ1AsTUFBTTtnQkFDTixvQkFBb0I7Z0JBQ3BCLGVBQWU7Z0JBQ2YsaUJBQWlCO2dCQUNqQixTQUFTO2dCQUNULHlCQUF5QjthQUMxQjtTQUNGLENBQUM7S0FDSCxDQUFBO0lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRTFDLElBQUksTUFBTSxHQUFHO1FBQ1gsVUFBVSxFQUFFLEdBQUc7UUFDZixLQUFLLEVBQUUsSUFBSTtRQUNYLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQTtJQUVELE1BQU0sQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQTtJQUN2QyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUE7SUFFN0IsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQTtLQUMvQjtJQUVELE9BQU8sTUFBTSxDQUFBO0FBRWpCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1pZ25vcmVcbmltcG9ydCAqIGFzIGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgaGVhZGVycyBmcm9tICdoZWFkZXJzJ1xuY29uc3QgeyBBUElfQkFTRSA9ICcnIH0gPSBwcm9jZXNzLmVudlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudDogYW55KSB7XG5cbiAgdmFyIHJlc3BvbnNlID0ge1xuICAgIGJvZHk6ICcnLFxuICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLnJlc3BvbnNlXG4gIH1cblxuICB0cnkge1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3JhbnRTaXRlQWNjZXNzKGV2ZW50LnBhdGhQYXJhbWV0ZXJzLnVzZXJJZCwgZXZlbnQucGF0aFBhcmFtZXRlcnMuc2l0ZU5hbWUpXG5cbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICByZXN1bHQuc3RhdHVzQ29kZSA9PSA0MDMgPyByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgXCJlcnJvclwiOiBcIkR1ZGEgQVBJIHJlc3BvbmRlZCB3aXRoIGVycm9yLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHRoZSBEdWRhIEFQSVwiIFxuICAgICAgfSkgOiByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyBcbiAgICAgICAgXCJlcnJvclwiOiBcIkR1ZGEgQVBJIHJlc3BvbmRlZCB3aXRoIGVycm9yLlwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IEpTT04uc3RyaW5naWZ5KHJlc3VsdC5tZXNzYWdlKSAgXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBcInN0YXR1c1wiOiBgVXNlciAke2V2ZW50LnBhdGhQYXJhbWV0ZXJzLnVzZXJJZH0gd2FzIGdyYW50ZWQgYWNjZXNzIHRvIHNpdGUgJHtldmVudC5wYXRoUGFyYW1ldGVycy5zaXRlTmFtZX0uYFxuICAgICAgfSlcbiAgICB9XG5cbiAgfSBjYXRjaChlKSB7XG5cbiAgICByZXNwb25zZS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgXCJlcnJvclwiOiBgUHJvYmxlbSBoYW5kbGluZyAke2V2ZW50Lmh0dHBNZXRob2R9IG9uIHJlc291cmNlICR7ZXZlbnQucmVzb3VyY2V9YCxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogZVxuICAgIH0pXG5cbiAgfVxuXG4gIHJldHVybiByZXNwb25zZVxuXG59XG5cbmNvbnN0IGdyYW50U2l0ZUFjY2VzcyA9IGFzeW5jIGZ1bmN0aW9uKHVzZXJJZDogYW55LCBzaXRlTmFtZTogYW55KSB7XG5cbiAgICBjb25zdCB1cmwgPSBgJHtBUElfQkFTRX0vYWNjb3VudHMvJHt1c2VySWR9L3NpdGVzLyR7c2l0ZU5hbWV9L3Blcm1pc3Npb25zYFxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5yZXF1ZXN0LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBwZXJtaXNzaW9uczogW1xuICAgICAgICAgICdTVEFUU19UQUInLFxuICAgICAgICAgICdFRElUJyxcbiAgICAgICAgICAnRV9DT01NRVJDRScsXG4gICAgICAgICAgJ1BVQkxJU0gnLFxuICAgICAgICAgICdSRVBVQkxJU0gnLFxuICAgICAgICAgICdERVZfTU9ERScsXG4gICAgICAgICAgJ0lOU0lURScsXG4gICAgICAgICAgJ1NFTycsXG4gICAgICAgICAgJ0JBQ0tVUFMnLFxuICAgICAgICAgICdDVVNUT01fRE9NQUlOJyxcbiAgICAgICAgICAnUkVTRVQnLFxuICAgICAgICAgICdCTE9HJyxcbiAgICAgICAgICAnUFVTSF9OT1RJRklDQVRJT05TJyxcbiAgICAgICAgICAnU0lURV9DT01NRU5UUycsXG4gICAgICAgICAgJ0NPTlRFTlRfTElCUkFSWScsXG4gICAgICAgICAgJ1VTRV9BUFAnLFxuICAgICAgICAgICdDTElFTlRfTUFOQUdFX0ZSRUVfQVBQUydcbiAgICAgICAgXVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucylcblxuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBlcnJvcjogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICcnXG4gICAgfVxuICBcbiAgICByZXN1bHQuc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGVcbiAgICByZXN1bHQuZXJyb3IgPSByZXNwb25zZS5lcnJvclxuICAgIFxuICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgIHJlc3VsdC5tZXNzYWdlID0gZXJyb3IubWVzc2FnZVxuICAgIH1cbiAgXG4gICAgcmV0dXJuIHJlc3VsdFxuXG59XG4iXX0=