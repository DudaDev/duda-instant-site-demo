"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
// @ts-ignore
const fetch = require("node-fetch");
// @ts-ignore
const headers_1 = require("headers");
const { API_BASE = '', API_USER = '', API_PASS = '' } = process.env;
async function handler(event) {
    var response = {
        body: '',
        statusCode: 400,
        headers: headers_1.default.response
    };
    try {
        const result = await grantSiteAccess(event.pathParameters.userId, event.pathParameters.siteName);
        if (result.error) {
            result.statusCode == 403 ? response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": "Unable to authenticate with the Duda API"
            }) : response.body = JSON.stringify({
                "error": "Duda API responded with error.",
                "description": JSON.stringify(result.message)
            });
        }
        else {
            response.body = JSON.stringify({
                "status": `User ${event.pathParameters.userId} was granted access to site ${event.pathParameters.siteName}.`
            });
        }
    }
    catch (e) {
        response.body = JSON.stringify({
            "error": `Problem handling ${event.httpMethod} on resource ${event.resource}`,
            "description": e
        });
    }
    return response;
}
exports.handler = handler;
const grantSiteAccess = async function (userId, siteName) {
    const url = `${API_BASE}/accounts/${userId}/sites/${siteName}/permissions`;
    const options = {
        method: 'POST',
        headers: headers_1.default.request(API_USER, API_PASS),
        body: JSON.stringify({
            permissions: [
                'STATS_TAB',
                'EDIT',
                'E_COMMERCE',
                'PUBLISH',
                'REPUBLISH',
                'DEV_MODE',
                'INSITE',
                'SEO',
                'BACKUPS',
                'CUSTOM_DOMAIN',
                'RESET',
                'BLOG',
                'PUSH_NOTIFICATIONS',
                'SITE_COMMENTS',
                'CONTENT_LIBRARY',
                'USE_APP',
                'CLIENT_MANAGE_FREE_APPS'
            ]
        })
    };
    const response = await fetch(url, options);
    var result = {
        statusCode: 500,
        error: true,
        message: ''
    };
    result.statusCode = response.statusCode;
    result.error = response.error;
    if (response.error) {
        const error = await response.json();
        result.message = error.message;
    }
    return result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2Isb0NBQW1DO0FBQ25DLGFBQWE7QUFDYixxQ0FBNkI7QUFDN0IsTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUU1RCxLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQVU7SUFFdEMsSUFBSSxRQUFRLEdBQUc7UUFDYixJQUFJLEVBQUUsRUFBRTtRQUNSLFVBQVUsRUFBRSxHQUFHO1FBQ2YsT0FBTyxFQUFFLGlCQUFPLENBQUMsUUFBUTtLQUMxQixDQUFBO0lBRUQsSUFBSTtRQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFaEcsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3hELE9BQU8sRUFBRSxnQ0FBZ0M7Z0JBQ3pDLGFBQWEsRUFBRSwwQ0FBMEM7YUFDMUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxnQ0FBZ0M7Z0JBQ3pDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7YUFDOUMsQ0FBQyxDQUFBO1NBQ0g7YUFBTTtZQUNMLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDN0IsUUFBUSxFQUFFLFFBQVEsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLCtCQUErQixLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRzthQUM3RyxDQUFDLENBQUE7U0FDSDtLQUVGO0lBQUMsT0FBTSxDQUFDLEVBQUU7UUFFVCxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDN0IsT0FBTyxFQUFFLG9CQUFvQixLQUFLLENBQUMsVUFBVSxnQkFBZ0IsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUM3RSxhQUFhLEVBQUUsQ0FBQztTQUNqQixDQUFDLENBQUE7S0FFSDtJQUVELE9BQU8sUUFBUSxDQUFBO0FBRWpCLENBQUM7QUFyQ0QsMEJBcUNDO0FBRUQsTUFBTSxlQUFlLEdBQUcsS0FBSyxXQUFVLE1BQVcsRUFBRSxRQUFhO0lBRTdELE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxhQUFhLE1BQU0sVUFBVSxRQUFRLGNBQWMsQ0FBQTtJQUUxRSxNQUFNLE9BQU8sR0FBRztRQUNkLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFLGlCQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDNUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDbkIsV0FBVyxFQUFFO2dCQUNYLFdBQVc7Z0JBQ1gsTUFBTTtnQkFDTixZQUFZO2dCQUNaLFNBQVM7Z0JBQ1QsV0FBVztnQkFDWCxVQUFVO2dCQUNWLFFBQVE7Z0JBQ1IsS0FBSztnQkFDTCxTQUFTO2dCQUNULGVBQWU7Z0JBQ2YsT0FBTztnQkFDUCxNQUFNO2dCQUNOLG9CQUFvQjtnQkFDcEIsZUFBZTtnQkFDZixpQkFBaUI7Z0JBQ2pCLFNBQVM7Z0JBQ1QseUJBQXlCO2FBQzFCO1NBQ0YsQ0FBQztLQUNILENBQUE7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFMUMsSUFBSSxNQUFNLEdBQUc7UUFDWCxVQUFVLEVBQUUsR0FBRztRQUNmLEtBQUssRUFBRSxJQUFJO1FBQ1gsT0FBTyxFQUFFLEVBQUU7S0FDWixDQUFBO0lBRUQsTUFBTSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFBO0lBQ3ZDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQTtJQUU3QixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7UUFDbEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDbkMsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO0tBQy9CO0lBRUQsT0FBTyxNQUFNLENBQUE7QUFFakIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWlnbm9yZVxuaW1wb3J0ICogYXMgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCdcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBoZWFkZXJzIGZyb20gJ2hlYWRlcnMnXG5jb25zdCB7IEFQSV9CQVNFID0gJycsIEFQSV9VU0VSID0gJycsIEFQSV9QQVNTID0gJycgfSA9IHByb2Nlc3MuZW52XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50OiBhbnkpIHtcblxuICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgYm9keTogJycsXG4gICAgc3RhdHVzQ29kZTogNDAwLFxuICAgIGhlYWRlcnM6IGhlYWRlcnMucmVzcG9uc2VcbiAgfVxuXG4gIHRyeSB7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBncmFudFNpdGVBY2Nlc3MoZXZlbnQucGF0aFBhcmFtZXRlcnMudXNlcklkLCBldmVudC5wYXRoUGFyYW1ldGVycy5zaXRlTmFtZSlcblxuICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgIHJlc3VsdC5zdGF0dXNDb2RlID09IDQwMyA/IHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICBcImVycm9yXCI6IFwiRHVkYSBBUEkgcmVzcG9uZGVkIHdpdGggZXJyb3IuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmFibGUgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIER1ZGEgQVBJXCIgXG4gICAgICB9KSA6IHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICBcImVycm9yXCI6IFwiRHVkYSBBUEkgcmVzcG9uZGVkIHdpdGggZXJyb3IuXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogSlNPTi5zdHJpbmdpZnkocmVzdWx0Lm1lc3NhZ2UpICBcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIFwic3RhdHVzXCI6IGBVc2VyICR7ZXZlbnQucGF0aFBhcmFtZXRlcnMudXNlcklkfSB3YXMgZ3JhbnRlZCBhY2Nlc3MgdG8gc2l0ZSAke2V2ZW50LnBhdGhQYXJhbWV0ZXJzLnNpdGVOYW1lfS5gXG4gICAgICB9KVxuICAgIH1cblxuICB9IGNhdGNoKGUpIHtcblxuICAgIHJlc3BvbnNlLmJvZHkgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBcImVycm9yXCI6IGBQcm9ibGVtIGhhbmRsaW5nICR7ZXZlbnQuaHR0cE1ldGhvZH0gb24gcmVzb3VyY2UgJHtldmVudC5yZXNvdXJjZX1gLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBlXG4gICAgfSlcblxuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlXG5cbn1cblxuY29uc3QgZ3JhbnRTaXRlQWNjZXNzID0gYXN5bmMgZnVuY3Rpb24odXNlcklkOiBhbnksIHNpdGVOYW1lOiBhbnkpIHtcblxuICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFfS9hY2NvdW50cy8ke3VzZXJJZH0vc2l0ZXMvJHtzaXRlTmFtZX0vcGVybWlzc2lvbnNgXG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLnJlcXVlc3QoQVBJX1VTRVIsIEFQSV9QQVNTKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAnU1RBVFNfVEFCJyxcbiAgICAgICAgICAnRURJVCcsXG4gICAgICAgICAgJ0VfQ09NTUVSQ0UnLFxuICAgICAgICAgICdQVUJMSVNIJyxcbiAgICAgICAgICAnUkVQVUJMSVNIJyxcbiAgICAgICAgICAnREVWX01PREUnLFxuICAgICAgICAgICdJTlNJVEUnLFxuICAgICAgICAgICdTRU8nLFxuICAgICAgICAgICdCQUNLVVBTJyxcbiAgICAgICAgICAnQ1VTVE9NX0RPTUFJTicsXG4gICAgICAgICAgJ1JFU0VUJyxcbiAgICAgICAgICAnQkxPRycsXG4gICAgICAgICAgJ1BVU0hfTk9USUZJQ0FUSU9OUycsXG4gICAgICAgICAgJ1NJVEVfQ09NTUVOVFMnLFxuICAgICAgICAgICdDT05URU5UX0xJQlJBUlknLFxuICAgICAgICAgICdVU0VfQVBQJyxcbiAgICAgICAgICAnQ0xJRU5UX01BTkFHRV9GUkVFX0FQUFMnXG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpXG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgZXJyb3I6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnJ1xuICAgIH1cbiAgXG4gICAgcmVzdWx0LnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXNDb2RlXG4gICAgcmVzdWx0LmVycm9yID0gcmVzcG9uc2UuZXJyb3JcbiAgICBcbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICByZXN1bHQubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2VcbiAgICB9XG4gIFxuICAgIHJldHVybiByZXN1bHRcblxufVxuIl19