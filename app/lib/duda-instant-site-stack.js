"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DudaInstantSiteStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const apiGateway = require("@aws-cdk/aws-apigateway");
const dotenv = require("dotenv");
const cdk_spa_deploy_1 = require("cdk-spa-deploy");
const routes_1 = require("./routes");
const pjson = require("../package.json");
dotenv.config();
const verbs = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];
const environment = (({ API_USER = '', API_PASS = '', API_BASE = '' }) => ({
    API_USER,
    API_PASS,
    API_BASE,
    VERSION: pjson.version,
    NODE_PATH: '/opt/nodejs/lib/:/opt/nodejs/node_modules:$LAMBDA_RUNTIME_DIR/node_modules'
}))(process.env);
class DudaInstantSiteStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.layer = this.createLayer();
        this.createAPI(routes_1.default);
        // @ts-ignore
        new cdk_spa_deploy_1.SPADeploy(this, 'cfDeploy')
            .createSiteWithCloudfront({
            indexDoc: 'index.html',
            websiteFolder: '../frontend/build'
        });
    }
    createResources(resource, obj) {
        for (const [key, value] of Object.entries(obj)) {
            key.toUpperCase() == "OPTIONS"
                ? resource.addMethod(key, new apiGateway.LambdaIntegration(this.createOptionsHandler(key.toUpperCase(), value)))
                : verbs.includes(key.toUpperCase())
                    ? resource.addMethod(key, new apiGateway.LambdaIntegration(this.createLambda(key.toUpperCase(), value)))
                    : this.createResources(resource.addResource(key), value);
        }
        return resource;
    }
    createAPI(routes) {
        const api = new apiGateway.LambdaRestApi(this, 'duda', {
            handler: this.createLambda('ANY', 'root'),
            proxy: false
        });
        api.root.addMethod('ANY');
        this.createResources(api.root, routes);
        return api;
    }
    createLambda(verb, dir) {
        return new lambda.Function(this, `${verb}-${dir}-Lambda`, this.getLambdaConfig(`lambdas/${dir}`));
    }
    createOptionsHandler(verb, dir) {
        return new lambda.Function(this, `${verb}-${dir}-Lambda`, this.getLambdaConfig(`lambdas/root`));
    }
    getLambdaConfig(path) {
        return {
            code: lambda.Code.fromAsset(path),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            timeout: cdk.Duration.seconds(20),
            environment,
            layers: [this.layer]
        };
    }
    createLayer() {
        return new lambda.LayerVersion(this, 'lambda-layer', {
            code: lambda.Code.fromAsset('layers'),
            compatibleRuntimes: [lambda.Runtime.NODEJS_14_X],
        });
    }
}
exports.DudaInstantSiteStack = DudaInstantSiteStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVkYS1pbnN0YW50LXNpdGUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkdWRhLWluc3RhbnQtc2l0ZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLHNEQUFxRDtBQUNyRCxpQ0FBaUM7QUFHakMsbURBQTJDO0FBQzNDLHFDQUE4QjtBQUM5Qix5Q0FBeUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELE1BQU0sV0FBVyxHQUFHLENBQ2xCLENBQUMsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztJQUN0QixTQUFTLEVBQUUsNEVBQTRFO0NBQzFGLENBQUMsQ0FDSCxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVmLE1BQWEsb0JBQXFCLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFHakQsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFNLENBQUMsQ0FBQztRQUV2QixhQUFhO1FBQ2IsSUFBSSwwQkFBUyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUM7YUFDNUIsd0JBQXdCLENBQUM7WUFDeEIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsYUFB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cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgYXBpR2F0ZXdheSBmcm9tICdAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheSdcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHsgRnVuY3Rpb24sIEZ1bmN0aW9uUHJvcHMsIExheWVyVmVyc2lvbiB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgSVJlc291cmNlLCBMYW1iZGFSZXN0QXBpIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0IHsgU1BBRGVwbG95IH0gZnJvbSAnY2RrLXNwYS1kZXBsb3knO1xuaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcyc7XG5pbXBvcnQgKiBhcyBwanNvbiBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5cbmNvbnN0IHZlcmJzID0gWydHRVQnLCdQT1NUJywnUFVUJywnUEFUQ0gnLCdERUxFVEUnXTtcbmNvbnN0IGVudmlyb25tZW50ID0gKFxuICAoeyBBUElfVVNFUiA9ICcnLCBBUElfUEFTUyA9ICcnLCBBUElfQkFTRSA9ICcnIH0pID0+ICh7XG4gICAgICBBUElfVVNFUixcbiAgICAgIEFQSV9QQVNTLFxuICAgICAgQVBJX0JBU0UsXG4gICAgICBWRVJTSU9OOiBwanNvbi52ZXJzaW9uLFxuICAgICAgTk9ERV9QQVRIOiAnL29wdC9ub2RlanMvbGliLzovb3B0L25vZGVqcy9ub2RlX21vZHVsZXM6JExBTUJEQV9SVU5USU1FX0RJUi9ub2RlX21vZHVsZXMnXG4gIH0pXG4pKHByb2Nlc3MuZW52KTtcblxuZXhwb3J0IGNsYXNzIER1ZGFJbnN0YW50U2l0ZVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgcHJpdmF0ZSBsYXllcjogTGF5ZXJWZXJzaW9uO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICB0aGlzLmxheWVyID0gdGhpcy5jcmVhdGVMYXllcigpO1xuICAgIHRoaXMuY3JlYXRlQVBJKHJvdXRlcyk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbmV3IFNQQURlcGxveSh0aGlzLCAnY2ZEZXBsb3knKVxuICAgICAgLmNyZWF0ZVNpdGVXaXRoQ2xvdWRmcm9udCh7XG4gICAgICAgIGluZGV4RG9jOiAnaW5kZXguaHRtbCcsXG4gICAgICAgIHdlYnNpdGVGb2xkZXI6ICcuLi9mcm9udGVuZC9idWlsZCdcbiAgICAgIH0pO1xuXG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVJlc291cmNlcyhyZXNvdXJjZTogSVJlc291cmNlLCBvYmo6IG9iamVjdCk6IElSZXNvdXJjZSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgICAga2V5LnRvVXBwZXJDYXNlKCkgPT0gXCJPUFRJT05TXCJcbiAgICAgICAgPyByZXNvdXJjZS5hZGRNZXRob2Qoa2V5LCBuZXcgYXBpR2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbih0aGlzLmNyZWF0ZU9wdGlvbnNIYW5kbGVyKGtleS50b1VwcGVyQ2FzZSgpLHZhbHVlKSkpXG4gICAgICAgIDogdmVyYnMuaW5jbHVkZXMoa2V5LnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgPyByZXNvdXJjZS5hZGRNZXRob2Qoa2V5LCBuZXcgYXBpR2F0ZXdheS5MYW1iZGFJbnRlZ3JhdGlvbih0aGlzLmNyZWF0ZUxhbWJkYShrZXkudG9VcHBlckNhc2UoKSx2YWx1ZSkpKVxuICAgICAgICAgIDogdGhpcy5jcmVhdGVSZXNvdXJjZXMocmVzb3VyY2UuYWRkUmVzb3VyY2Uoa2V5KSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNvdXJjZTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQVBJKHJvdXRlczogb2JqZWN0KTogTGFtYmRhUmVzdEFwaSB7XG4gICAgY29uc3QgYXBpID0gbmV3IGFwaUdhdGV3YXkuTGFtYmRhUmVzdEFwaSh0aGlzLCAnZHVkYScsIHtcbiAgICAgIGhhbmRsZXI6IHRoaXMuY3JlYXRlTGFtYmRhKCdBTlknLCdyb290JyksXG4gICAgICBwcm94eTogZmFsc2VcbiAgICB9KTtcblxuICAgIGFwaS5yb290LmFkZE1ldGhvZCgnQU5ZJyk7XG4gICAgdGhpcy5jcmVhdGVSZXNvdXJjZXMoYXBpLnJvb3QsIHJvdXRlcyk7XG4gICAgcmV0dXJuIGFwaTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlTGFtYmRhKHZlcmI6IHN0cmluZywgZGlyOiBzdHJpbmcpOiBGdW5jdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgYCR7dmVyYn0tJHtkaXJ9LUxhbWJkYWAsIHRoaXMuZ2V0TGFtYmRhQ29uZmlnKGBsYW1iZGFzLyR7ZGlyfWApKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlT3B0aW9uc0hhbmRsZXIodmVyYjogc3RyaW5nLCBkaXI6IHN0cmluZyk6IEZ1bmN0aW9uIHtcbiAgICByZXR1cm4gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBgJHt2ZXJifS0ke2Rpcn0tTGFtYmRhYCwgdGhpcy5nZXRMYW1iZGFDb25maWcoYGxhbWJkYXMvcm9vdGApKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGFtYmRhQ29uZmlnKHBhdGg6IHN0cmluZyk6IEZ1bmN0aW9uUHJvcHMge1xuICAgIHJldHVybiB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aCksXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDIwKSxcbiAgICAgIGVudmlyb25tZW50LFxuICAgICAgbGF5ZXJzOiBbdGhpcy5sYXllcl1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUxheWVyKCk6IExheWVyVmVyc2lvbiB7XG4gICAgcmV0dXJuIG5ldyBsYW1iZGEuTGF5ZXJWZXJzaW9uKHRoaXMsICdsYW1iZGEtbGF5ZXInLCB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJ2xheWVycycpLFxuICAgICAgY29tcGF0aWJsZVJ1bnRpbWVzOiBbbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1hdLFxuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==