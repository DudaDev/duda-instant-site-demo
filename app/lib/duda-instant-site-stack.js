"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DudaInstantSiteStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const s3 = require("@aws-cdk/aws-s3");
const cf = require("@aws-cdk/aws-cloudfront");
const apiGateway = require("@aws-cdk/aws-apigateway");
const dotenv = require("dotenv");
const aws_apigateway_1 = require("@aws-cdk/aws-apigateway");
const routes_1 = require("./routes");
const pjson = require("../package.json");
const aws_cognito_1 = require("@aws-cdk/aws-cognito");
dotenv.config();
const verbs = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];
const environment = (({ API_USER = '', API_PASS = '', API_BASE = '', WEBUI_USER = '', WEBUI_TEMP_PASS = '', REGION = '' }) => ({
    API_USER,
    API_PASS,
    API_BASE,
    WEBUI_USER,
    WEBUI_TEMP_PASS,
    REGION,
    VERSION: pjson.version,
    NODE_PATH: '/opt/nodejs/lib/:/opt/nodejs/node_modules:$LAMBDA_RUNTIME_DIR/node_modules'
}))(process.env);
class DudaInstantSiteStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.layer = this.createLayer();
        // S3 frontend bucket
        this.s3bucket = new s3.Bucket(this, "DudaInstantSiteFrontend", {
            publicReadAccess: true,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            websiteIndexDocument: "index.html"
        });
        // Cloudfront
        this.cloudfront = new cf.CloudFrontWebDistribution(this, "CDKCRAStaticDistribution", {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: this.s3bucket
                    },
                    behaviors: [{ isDefaultBehavior: true }]
                },
            ]
        });
        const userPool = new aws_cognito_1.UserPool(this, 'Instant Sites User Pool', {
            signInAliases: {
                username: true
            },
            selfSignUpEnabled: false
        });
        const userPoolClient = userPool.addClient('Instant Sites User Pool Client', {
            authFlows: {
                userSrp: true
            },
            oAuth: {
                callbackUrls: ['http://localhost:3000'],
                logoutUrls: ['http://localhost:3000'],
                flows: {
                    implicitCodeGrant: true
                }
            }
        });
        this.api = this.createAPI(routes_1.default);
        this.authorizer = new aws_apigateway_1.CfnAuthorizer(this, 'cfnAuth', {
            restApiId: this.api.restApiId,
            name: 'InstantSiteAPIAuthorizer',
            type: 'COGNITO_USER_POOLS',
            identitySource: 'method.request.header.Authorization',
            providerArns: [userPool.userPoolArn],
        });
        this.createResources(this.api.root, routes_1.default);
        new cdk.CfnOutput(this, "apiBase", {
            value: this.api.url
        });
        new cdk.CfnOutput(this, "userPoolId", {
            value: userPool.userPoolId
        });
        new cdk.CfnOutput(this, "userPoolClientId", {
            value: userPoolClient.userPoolClientId
        });
        new cdk.CfnOutput(this, "userPoolRegion", {
            value: environment.REGION
        });
        new cdk.CfnOutput(this, "s3Bucket", {
            value: this.s3bucket.bucketName
        });
        new cdk.CfnOutput(this, "cfDistributionDomainName", {
            value: this.cloudfront.distributionDomainName
        });
        new cdk.CfnOutput(this, "cfDistributionId", {
            value: this.cloudfront.distributionId
        });
        new cdk.CfnOutput(this, "webUiUser", {
            value: environment.WEBUI_USER
        });
        new cdk.CfnOutput(this, "webUiPass", {
            value: environment.WEBUI_TEMP_PASS
        });
    }
    createResources(resource, obj) {
        for (const [key, value] of Object.entries(obj)) {
            verbs.includes(key.toUpperCase())
                ? resource.addMethod(key, new apiGateway.LambdaIntegration(this.createLambda(key.toUpperCase(), value)), {
                    authorizationType: aws_apigateway_1.AuthorizationType.COGNITO,
                    authorizer: {
                        authorizerId: this.authorizer.ref
                    }
                })
                : this.createResources(resource.addResource(key), value);
        }
        return resource;
    }
    createAPI(routes) {
        const api = new apiGateway.LambdaRestApi(this, 'duda', {
            handler: this.createLambda('ANY', 'root'),
            proxy: false,
            defaultCorsPreflightOptions: this.getCORS(this.cloudfront.distributionDomainName)
        });
        api.root.addMethod('ANY');
        return api;
    }
    getCORS(domain) {
        return {
            allowOrigins: ["*"],
            allowMethods: ["OPTIONS", "GET", "PUT", "POST", "DELETE", "PATCH"],
            allowHeaders: ["Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent"],
            allowCredentials: false
        };
    }
    createLambda(verb, dir) {
        return new lambda.Function(this, `${verb}-${dir}-Lambda`, this.getLambdaConfig(`lambdas/${dir}`));
    }
    getLambdaConfig(path) {
        return {
            code: lambda.Code.fromAsset(path),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            timeout: cdk.Duration.seconds(20),
            environment,
            layers: [this.layer]
        };
    }
    createLayer() {
        return new lambda.LayerVersion(this, 'lambda-layer', {
            code: lambda.Code.fromAsset('layers'),
            compatibleRuntimes: [lambda.Runtime.NODEJS_14_X],
        });
    }
}
exports.DudaInstantSiteStack = DudaInstantSiteStack;
//# sourceMappingURL=data:application/json;base64,