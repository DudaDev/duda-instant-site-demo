"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DudaInstantSiteStack = void 0;
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const apiGateway = require("@aws-cdk/aws-apigateway");
const dotenv = require("dotenv");
const aws_apigateway_1 = require("@aws-cdk/aws-apigateway");
const cdk_spa_deploy_1 = require("cdk-spa-deploy");
const routes_1 = require("./routes");
const pjson = require("../package.json");
const aws_cognito_1 = require("@aws-cdk/aws-cognito");
dotenv.config();
const verbs = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];
const environment = (({ API_USER = '', API_PASS = '', API_BASE = '' }) => ({
    API_USER,
    API_PASS,
    API_BASE,
    VERSION: pjson.version,
    NODE_PATH: '/opt/nodejs/lib/:/opt/nodejs/node_modules:$LAMBDA_RUNTIME_DIR/node_modules'
}))(process.env);
class DudaInstantSiteStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.layer = this.createLayer();
        this.frontend = new cdk_spa_deploy_1.SPADeploy(this, 'cfDeploy')
            .createSiteWithCloudfront({
            indexDoc: 'index.html',
            websiteFolder: '../frontend/build'
        });
        const userPool = new aws_cognito_1.UserPool(this, 'Instant Sites User Pool', {
            signInAliases: {
                username: true
            },
            selfSignUpEnabled: false
        });
        this.api = this.createAPI(routes_1.default);
        this.authorizer = new aws_apigateway_1.CfnAuthorizer(this, 'cfnAuth', {
            restApiId: this.api.restApiId,
            name: 'InstantSiteAPIAuthorizer',
            type: 'COGNITO_USER_POOLS',
            identitySource: 'method.request.header.Authorization',
            providerArns: [userPool.userPoolArn],
        });
        this.createResources(this.api.root, routes_1.default);
        // fs.writeFileSync('../frontend/.env',`API_BASE=${this.api.url}`);
    }
    createResources(resource, obj) {
        for (const [key, value] of Object.entries(obj)) {
            verbs.includes(key.toUpperCase())
                ? resource.addMethod(key, new apiGateway.LambdaIntegration(this.createLambda(key.toUpperCase(), value)), {
                    authorizationType: aws_apigateway_1.AuthorizationType.COGNITO,
                    authorizer: {
                        authorizerId: this.authorizer.ref
                    }
                })
                : this.createResources(resource.addResource(key), value);
        }
        return resource;
    }
    createAPI(routes) {
        const api = new apiGateway.LambdaRestApi(this, 'duda', {
            handler: this.createLambda('ANY', 'root'),
            proxy: false,
            defaultCorsPreflightOptions: this.getCORS(this.frontend.distribution.distributionDomainName)
        });
        api.root.addMethod('ANY');
        return api;
    }
    getCORS(domain) {
        return {
            allowOrigins: ["*"],
            allowMethods: ["OPTIONS", "GET", "PUT", "POST", "DELETE", "PATCH"],
            allowHeaders: ["Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent"],
            allowCredentials: false
        };
    }
    createLambda(verb, dir) {
        return new lambda.Function(this, `${verb}-${dir}-Lambda`, this.getLambdaConfig(`lambdas/${dir}`));
    }
    getLambdaConfig(path) {
        return {
            code: lambda.Code.fromAsset(path),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_14_X,
            timeout: cdk.Duration.seconds(20),
            environment,
            layers: [this.layer]
        };
    }
    createLayer() {
        return new lambda.LayerVersion(this, 'lambda-layer', {
            code: lambda.Code.fromAsset('layers'),
            compatibleRuntimes: [lambda.Runtime.NODEJS_14_X],
        });
    }
}
exports.DudaInstantSiteStack = DudaInstantSiteStack;
//# sourceMappingURL=data:application/json;base64,